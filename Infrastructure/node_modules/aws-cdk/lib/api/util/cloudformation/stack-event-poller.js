"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackEventPoller = void 0;
class StackEventPoller {
    constructor(cfn, props) {
        this.cfn = cfn;
        this.props = props;
        this.events = [];
        this.complete = false;
        this.eventIds = new Set();
        this.nestedStackPollers = {};
    }
    /**
     * From all accumulated events, return only the errors
     */
    get resourceErrors() {
        return this.events.filter((e) => e.event.ResourceStatus?.endsWith('_FAILED') && !e.isStackEvent);
    }
    /**
     * Poll for new stack events
     *
     * Will not return events older than events indicated by the constructor filters.
     *
     * Recurses into nested stacks, and returns events old-to-new.
     */
    async poll() {
        const events = await this.doPoll();
        // Also poll all nested stacks we're currently tracking
        for (const [logicalId, poller] of Object.entries(this.nestedStackPollers)) {
            events.push(...(await poller.poll()));
            if (poller.complete) {
                delete this.nestedStackPollers[logicalId];
            }
        }
        // Return what we have so far
        events.sort((a, b) => a.event.Timestamp.valueOf() - b.event.Timestamp.valueOf());
        this.events.push(...events);
        return events;
    }
    async doPoll() {
        const events = [];
        try {
            const eventList = await this.cfn.describeStackEvents({
                StackName: this.props.stackName,
            });
            for (const event of eventList) {
                // Event from before we were interested in 'em
                if (this.props.startTime !== undefined && event.Timestamp.valueOf() < this.props.startTime) {
                    return events;
                }
                // Already seen this one
                if (this.eventIds.has(event.EventId)) {
                    return events;
                }
                this.eventIds.add(event.EventId);
                // The events for the stack itself are also included next to events about resources; we can test for them in this way.
                const isParentStackEvent = event.PhysicalResourceId === event.StackId;
                if (isParentStackEvent && this.props.stackStatuses?.includes(event.ResourceStatus ?? '')) {
                    return events;
                }
                // Fresh event
                const resEvent = {
                    event: event,
                    parentStackLogicalIds: this.props.parentStackLogicalIds ?? [],
                    isStackEvent: isParentStackEvent,
                };
                events.push(resEvent);
                if (!isParentStackEvent &&
                    event.ResourceType === 'AWS::CloudFormation::Stack' &&
                    isStackBeginOperationState(event.ResourceStatus)) {
                    // If the event is not for `this` stack and has a physical resource Id, recursively call for events in the nested stack
                    this.trackNestedStack(event, [...(this.props.parentStackLogicalIds ?? []), event.LogicalResourceId ?? '']);
                }
                if (isParentStackEvent && isStackTerminalState(event.ResourceStatus)) {
                    this.complete = true;
                }
            }
        }
        catch (e) {
            if (!(e.name === 'ValidationError' && e.message === `Stack [${this.props.stackName}] does not exist`)) {
                throw e;
            }
        }
        // // Also poll all nested stacks we're currently tracking
        // for (const [logicalId, poller] of Object.entries(this.nestedStackPollers)) {
        //   events.push(...(await poller.poll()));
        //   if (poller.complete) {
        //     delete this.nestedStackPollers[logicalId];
        //   }
        // }
        // // Return what we have so far
        // events.sort((a, b) => a.event.Timestamp!.valueOf() - b.event.Timestamp!.valueOf());
        // this.events.push(...events);
        return events;
    }
    /**
     * On the CREATE_IN_PROGRESS, UPDATE_IN_PROGRESS, DELETE_IN_PROGRESS event of a nested stack, poll the nested stack updates
     */
    trackNestedStack(event, parentStackLogicalIds) {
        const logicalId = event.LogicalResourceId;
        const physicalResourceId = event.PhysicalResourceId;
        // The CREATE_IN_PROGRESS event for a Nested Stack is emitted twice; first without a PhysicalResourceId
        // and then with. Ignore this event if we don't have that property yet.
        //
        // (At this point, I also don't trust that logicalId is always going to be there so validate that as well)
        if (!logicalId || !physicalResourceId) {
            return;
        }
        if (!this.nestedStackPollers[logicalId]) {
            this.nestedStackPollers[logicalId] = new StackEventPoller(this.cfn, {
                stackName: physicalResourceId,
                parentStackLogicalIds: parentStackLogicalIds,
                startTime: event.Timestamp.valueOf(),
            });
        }
    }
}
exports.StackEventPoller = StackEventPoller;
function isStackBeginOperationState(state) {
    return [
        'CREATE_IN_PROGRESS',
        'UPDATE_IN_PROGRESS',
        'DELETE_IN_PROGRESS',
        'UPDATE_ROLLBACK_IN_PROGRESS',
        'ROLLBACK_IN_PROGRESS',
    ].includes(state ?? '');
}
function isStackTerminalState(state) {
    return !(state ?? '').endsWith('_IN_PROGRESS');
}
//# sourceMappingURL=data:application/json;base64,